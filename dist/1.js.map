{"version":3,"sources":["webpack:///./components/LazyTippy.tsx"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AAEA;AAKe,yEAAC,KAAD,EAAsB;AAC7B,gEAAwB,4CAAK,CAAC,QAAN,CAAe,KAAf,CAAxB,EAA6C,CAA7C;AAAA,MAAC,OAAO,QAAR;AAAA,MAAU,UAAU,QAApB;;AAEN,MAAM,UAAU,GAAG;AACjB,MAAE,EAAE;AAAM,aAAC;AACT,cAAM,EAAE;AAAM,2BAAU,CAAV,IAAU,CAAV;AAAgB,SADrB;AAET,gBAAQ,EAAE;AAAM,2BAAU,CAAV,KAAU,CAAV;AAAiB;AAFxB,OAAD;AAGR;AAJe,GAAnB;;AAOA,MAAM,aAAa,8DAAQ,KAAR,CAAnB;;AAEA,eAAa,CAAC,OAAd,GAAqB,wDAAI,UAAJ,GAAoB,KAAK,CAAC,OAAN,IAAiB,EAArC,CAArB;;AAEA,MAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,QAAM,QAAM,GAAG,KAAK,CAAC,MAArB,CADgB,CACa;;AAC7B,iBAAa,CAAC,MAAd,GAAuB;AAAC;;WAAA,U,EAAA,qB,EAAA,I,EAAO;AAAP;;;AAAY,aAAC,OAAO,GAAG,QAAM,MAAN,CAAM,MAAN,EAAM,uDAAI,IAAJ,CAAN,CAAH,GAAqB,EAA7B;AAAgC,KAApE;AACD,GAHD,MAGO;AACL,iBAAa,CAAC,OAAd,GAAwB,OAAO,GAAG,KAAK,CAAC,OAAT,GAAmB,EAAlD;AACD;;AAED,SAAO,2DAAC,sDAAD,EAAM,2DAAK,aAAL,CAAN,CAAP;AACD,CAtBD,E","file":"1.js","sourcesContent":["// Will only render the `content` or `render` elements if the tippy is mounted to the DOM.\n// Replace <Tippy /> with <LazyTippy /> component and it should work the same.\n\nimport React from 'react';\n\nimport Tippy, { TippyProps } from '@tippyjs/react';\n\n// Export own set of props (even if they are the same for now) to enable clients to be more future-proof\nexport type LazyTippyProps = TippyProps;\n\nexport default (props: LazyTippyProps) => {\n  const [mounted, setMounted] = React.useState(false);\n\n  const lazyPlugin = {\n    fn: () => ({\n      onShow: () => setMounted(true),\n      onHidden: () => setMounted(false),\n    }),\n  };\n\n  const computedProps = { ...props };\n\n  computedProps.plugins = [lazyPlugin, ...(props.plugins || [])];\n\n  if (props.render) {\n    const render = props.render; // let TypeScript safely derive that render is not undefined\n    computedProps.render = (...args) => (mounted ? render(...args) : '');\n  } else {\n    computedProps.content = mounted ? props.content : '';\n  }\n\n  return <Tippy {...computedProps} />;\n};\n"],"sourceRoot":""}